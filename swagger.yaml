openapi: 3.0.0
info:
  title: sol-db-in
  description: A database API for sol-db-in website
  termsOfService: ''
  contact:
    name: API Support
    url: https://github.com/KennelTeam
    email: andrusov.n@gmail.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.1
servers:
  - url: http://the.endpoint.will.be.later
paths:
  /actions:
    get:
      description:
        Returns a list of filtered changes in the database. If any of arguments is not passed, it does not filter by this value
      parameters:
        - in: body
          name: filter
          schema:
            type: object
            properties:
              user_id:
                type: integer
                description: a user who made the change in DB
              timestamp_range:
                $ref: '#components/schemas/TimestampRange'
              table_id:
                type: integer
                description: the id of the table where the change was made
              column_id:
                type: string
                description: the name of the database column to search the values
              row_id:
                type: integer
                description: id of the database record to change
              value:
                oneOf:
                  - type: integer
                  - type: string
                  - type: boolean
              ip:
                type: string
              question_id:
                type: integer
                description: if you are searching for changes in answers to concrete question, pass here the id of the question
              max_length:
                type: integer
                description: maximum size of the result array
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#components/schemas/Action'
  /login:
    post:
      description:
        Tries to log in a use
      parameters:
        - in: body
          name: data
          schema:
            type: object
            properties:
              login:
                type: string
              password:
                type: string
            required:
              - login
              - password
      responses:
        200:
          description: Successfully logged in (JWT saved in cookies)
        400:
          description: Not all arguments provided
        401:
          description: Invalid password
        404:
          description: No such user

  /register:
    post:
      description:
        Creates a new user
      parameters:
        - in: body
          name: data
          schema:
            type: object
            properties:
              login:
                type: string
              name:
                type: string
              comment:
                type: string
              role:
                type: string
                enum:
                  - GUEST
                  - INTERN
                  - EDITOR
                  - ADMIN
              password:
                type: string
            required:
              - login
              - name
              - comment
              - role
              - password
      responses:
        201:
          description: Successfully created
        304:
          description: User already exists
  /logout:
    post:
      description:
        Clears user's login cookies
      responses:
        200:
          description: Successfull log out

  /forms:
    get:
      description:
        Returns a list of filtered leaders
      parameters:
        - in: body
          name: data
          schema:
            type: object
            properties:
              form_type:
                type: string
                enum:
                  - LEADER
                  - PROJECT
              name_substr:
                type: string
              answer_filters:
                type: array
                items:
                  type: object
                  properties:
                    question_id:
                      type: integer
                    row_question_id:
                      type: integer
                      description:
                        If it is supposed to be an answer to a fixed table question
                    exact_value:
                      oneOf:
                        - type: integer
                        - type: string
                        - type: boolean
                    min_value:
                      oneOf:
                        - type: integer
                        - schema:
                          type: string
                          format: date-time
                    max_value:
                      oneOf:
                        - type: integer
                        - schema:
                          type: string
                          format: date-time
                    substring:
                      type: string
            required:
              - form_type
              - question_id
              - answer_filters
      responses:
        200:
          description:
            Successful search
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#components/schemas/Form'
        400:
          description:
            Invalid set of arguments. For example no form_type is provided or no question_id in a filter is provided.
  /forms/{id}:
    get:
      description:
        Returns a full info about a given form by it's ID
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: integer
      responses:
        200:
          description: Successful return
          content:
            application/json:
              schema:
                $ref: '#components/schemas/Form'
        404:
          description: No form with this ID
        400:
          description: Invalid argument as ID
    post:
      description:
        Update form info or create a new form
      parameters:
        - in: body
          name: form
          schema:
            $ref: '#components/schemas/Form'
      responses:
        200:
          description:
            Successful update
        403:
          description:
            Not enough rights to perform some of the changes
        500:
          description:
            Unexpected server problem
  /statistics:
    get:
      description:
        Prepares information about answers for a given question
      parameters:
        - in: body
          name: info
          schema:
            type: object
            properties:
              question_id:
                type: integer
              min_value:
                oneOf:
                  - type: integer
                  - schema:
                    type: string
                    format: date-time
              max_value:
                oneOf:
                  - type: integer
                  - schema:
                    type: string
                    format: date-time
              step:
                type: integer
                description:
                  If the answer type is datetime, step in days should be passed
            required:
              - question_id

      responses:
        200:
          description:
            Success
          content:
            application/json:
              schema:
                type: object
                description:
                  It's a table with keys=columns and then subkeys=rows
                properties:
                  PLANNED:
                    type: object
                    properties:
                      row_1:
                        type: integer
                      row_2:
                        type: integer
                      etc...:
                        type: integer
                  STARTED:
                    type: object
                    properties:
                      row_1:
                        type: integer
                      row_2:
                        type: integer
                      etc...:
                        type: integer
                  FINISHED:
                    type: object
                    properties:
                      row_1:
                        type: integer
                      row_2:
                        type: integer
                      etc...:
                        type: integer

  /answer_options:
    get:
      description:
        Returns a list of answer option blocks
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#components/schemas/AnswerBlock'
    post:
      description:
        Updates or creates a new answer option block
      parameters:
        - in: body
          name: answer_block
          schema:
            $ref: '#components/schemas/AnswerBlock'
      responses:
        200:
          description: Success
        400:
          description: Some arguments are invalid

  /tags:
    get:
      description:
        Returns a tree of Tags
      parameters:
        - in: body
          name: filter
          schema:
            type: object
            properties:
              block_id:
                type: integer
                description: ID of the block tags tree should belong to. If none is passed, all tags will be returned
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    tag_type:
                      $ref: '#components/schemas/TranslatedText'
                    tags:
                      type: array
                      items:
                        $ref: '#components/schemas/Tag'
    post:
      description: Creates or updates a tag object
      parameters:
        - in: body
          name: tag
          schema:
            $ref: '#components/schemas/Tag'
      responses:
        200:
          description: Success
        400:
          description: Some of arguments are invalid

  /toponyms:
    get:
      description: Returns a tree of toponyms
      responses:
        200:
          description: A tree structured toponyms
          content:
            application/json:
              schema:
                $ref: '#components/schemas/Toponym'

components:
  schemas:
    Action:
      title: Action
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        table_id:
          type: integer
        column_id:
          type: string
        row_id:
          type: integer
        ip:
          type: string
        timestamp:
          type: string
          format: date-time
        value:
          oneOf:
            - type: integer
            - type: string
            - type: boolean

    User:
      title: User
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the given user.
          minimum: 0
        name:
          type: string
        login:
          type: string
        comment:
          type: string
          example: This is a test user
        role:
          type: string
          enum:
            - GUEST
            - INTERN
            - EDITOR
            - ADMIN
          example: EDITOR
        create_timestamp:
          type: string
          description: Set to true if the user's email has been verified.
          format: date-time
        deleted:
          type: boolean
          format: date
          description: The date that the user was created.
    Answer:
      title: Answer
      type: object
      properties:
        id:
          type: integer
        form_id:
          type: integer
        question_id:
          type: integer
        table_row:
          type: integer
        row_question_id:
          type: integer
        value:
          oneOf:
            - type: string
            - type: integer
            - type: boolean
        tags:
          type: array
          items:
            $ref: '#components/schemas/Tag'
        create_timestamp:
          type: string
          format: date-time
        deleted:
          type: boolean
    AnswerBlock:
      title: AnswerBlock
      type: object
      properties:
        id:
          type: integer
        name:
          $ref: '#/components/schemas/TranslatedText'
        options:
          type: array
          items:
            $ref: '#/components/schemas/AnswerOption'
        create_timestamp:
          type: string
          format: date-time
        deleted:
          type: boolean
      description: A block of AnswerOptions
    AnswerOption:
      title: AnswerOption
      type: object
      properties:
        id:
          type: integer
        name:
          $ref: '#/components/schemas/TranslatedText'
        short_name:
          $ref: '#/components/schemas/TranslatedText'
        answer_block_id:
          type: integer
        creation_timestamp:
          type: string
          format: date-time
        deleted:
          type: boolean
      description: An option object in multiple-choice or checkbox questions
    TranslatedText:
      title: TranslatedText
      type: object
      description: >-
        Contains different translations of one text (there might be any set of
        languages)
      properties:
        ru:
          type: string
          description: Russian translation of the text
        en:
          type: string
          description: English translation of the text
        ba:
          type: string
          description: Bahasa translation of the text
        etc...:
          type: string
    FormattingSettings:
      title: FormattingSettings
      type: object
      properties:
        id:
          type: integer
        block_sorting:
          type: integer
          description: If it's a free question. The key to sort it inside a block
        table_row:
          type: integer
          description: If it's a fixed table question. Row index in a table
        table_column:
          type: integer
          description: >-
            If it's a question table or fixed table question. Column index in
            the table
        show_on_main_page:
          type: boolean
          description: >-
            Should this question with it's answers be added to the table on the
            main page or not?
        block_id:
          type: integer
          description: Id of the question block this question is contained in
        table_id:
          type: integer
          description: >-
            If it's a question table question. Id of the table containing the
            question
        fixed_table_id:
          type: integer
          description: If it's a fixed table question. Id of the containing fixed table
        creation_timestamp:
          type: string
          format: date-time
        deleted:
          type: boolean
      description: >-
        Contains information for some question about how to format it and it's
        answers on the website
    PrivacySettings:
      title: PrivacySettings
      type: object
      description: An object with setting of privacy for some question
      properties:
        id:
          type: integer
        editor_access:
          type: string
          enum:
            - CAN_NOTHING
            - CAN_SEE
            - CAN_EDIT
        guest_access:
          type: string
          enum:
            - CAN_NOTHING
            - CAN_SEE
            - CAN_EDIT
        intern_access:
          type: string
          enum:
            - CAN_NOTHING
            - CAN_SEE
            - CAN_EDIT
        creation_timestamp:
          type: string
          format: date-time
        deleted:
          type: boolean
    RelationSettings:
      title: RelationSettings
      type: object
      properties:
        id:
          type: integer
        related_visualization_type:
          type: string
          enum:
            - FULL
            - NAMES_ONLY
            - NOTHING
          description: >-
            A visualization type (how to show this table on the related object
            page)
        related_visualization_sorting:
          type: integer
          description: >-
            Where to place the table on the page of related object (key for
            sorting with other question blocks)
        export_forward_relation:
          type: boolean
          description: Should this relation be exported to excel as an additional sheet
        export_inverse_relation:
          type: boolean
          description: >-
            Should the inverse relation be exported to excel as an additional
            sheet
        forward_relation_sheet_name:
          type: string
          description: If it should be exported in such way, how to call the sheet
        inverse_relation_sheet_name:
          type: string
          description: If it should be exported in such way, how to call the sheet
        creation_timestamp:
          type: string
          format: date-time
        deleted:
          type: boolean
      description: >-
        If the question is a relation, it should have additional relation
        settings
    Question:
      title: Question
      type: object
      properties:
        id:
          type: integer
        question_type:
          type: string
          enum:
            - DATE
            - USER
            - LONG_TEXT
            - SHORT_TEXT
            - MULTIPLE_CHOICE
            - CHECKBOX
            - LOCATION
            - NUMBER
            - BOOLEAN
            - RELATION
        comment:
          $ref: '#/components/schemas/TranslatedText'
        answer_block_id:
          type: integer
          description: If it is multiple-choice or checkbox, where to get the options?
        text:
          $ref: '#/components/schemas/TranslatedText'
        formatting_settings:
          $ref: '#/components/schemas/FormattingSettings'
        privacy_settings:
          $ref: '#/components/schemas/PrivacySettings'
        relation_settings:
          $ref: '#/components/schemas/RelationSettings'
        answers:
          type: array
          description: >-
            This is optional. If you request only a form, you'll get the object
            without this field. Otherwise it will contain answers of a requested
            leader/project
          items:
            $ref: '#/components/schemas/Answer'
    FixedTable:
      title: FixedTable
      type: object
      description: Describes a fixed table object
      properties:
        columns:
          type: array
          items:
            $ref: '#/components/schemas/Question'
        rows:
          type: array
          items:
            $ref: '#/components/schemas/Question'
        answers:
          type: array
          description: >-
            This is optional. If you request only a form, the result will not
            contain this field. Otherwise it returns a 2D array with the table
            of answers indexed by ansers[row][column]
          items:
            type: array
            items:
              $ref: '#/components/schemas/Answer'
    QuestionTable:
      title: QuestionTable
      type: object
      properties:
        questions:
          type: array
          description: >-
            If you request it with answers, each question will contain an array
            of answers (array = column of answers)
          items:
            $ref: '#/components/schemas/Question'
    QuestionBlock:
      title: QuestionBlock
      type: object
      properties:
        elements:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                example: question
              value:
                anyOf:
                  - $ref: '#/components/schemas/Question'
                  - $ref: '#/components/schemas/FixedTable'
                  - $ref: '#/components/schemas/QuestionTable'
                description: >-
                  If type is 'question' it will contain a Question object. If
                  type is 'table_question' it will contain a QuestionTable
                  object. If type is 'fixed_table_question', it will contain a
                  FixedTable object
      description: Fully describes question block elements in a proper order
    Form:
      title: Form
      type: object
      properties:
        id:
          type: integer
        state:
          type: string
          enum:
            - PLANNED
            - STARTED
            - FINISHED
        name:
          type: string
        form_type:
          type: string
          enum:
            - LEADER
            - PROJECT
        answers:
          type: array
          items:
            $ref: '#components/schemas/QuestionBlock'
    Tag:
      title: Tag
      type: object
      properties:
        id:
          type: integer
        text:
          $ref: '#components/schemas/TranslatedText'
        type_id:
          type: integer
          description: ID of tag type (tag group)
        parent_id:
          type: integer
          description: ID of a parent tag. If the tag is root, it's None
    Toponym:
      title: Toponym
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        parent_id:
          type: integer
        children:
          type: array
          items:
            $ref: '#components/schemas/Toponym'
    TimestampRange:
      title: TimestampRange
      type: object
      properties:
        from:
          type: string
          format: date-time
        to:
          type: string
          format: date-time
  securitySchemes: {}
