openapi: 3.0.0
info:
  title: sol-db-in
  description: A database API for sol-db-in website. It uses JWT for security. You obtain a JWT after logging in (it's stored in cookies) and then you should always provide it with every request. If you do not provide it to any endpoint except for login, you receive 403 error (Not authorized)
  termsOfService: ''
  contact:
    name: API Support
    url: https://github.com/KennelTeam
    email: andrusov.n@gmail.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.1
servers:
  - url: http://52.192.211.221:5000
paths:
  /actions:
    get:
      tags:
        - statistics
      description:
        Returns a list of filtered changes in the database. If any of arguments is not passed, it does not filter by this value
      parameters:
        - in: body
          name: filter
          schema:
            type: object
            properties:
              user_id:
                type: integer
                description: a user who made the change in DB
              timestamp_range:
                $ref: '#components/schemas/TimestampRange'
              table_id:
                type: integer
                description: the id of the table where the change was made
              column_id:
                type: string
                description: the name of the database column to search the values
              row_id:
                type: integer
                description: id of the database record to change
              value:
                oneOf:
                  - type: integer
                  - type: string
                  - type: boolean
              ip:
                type: string
              question_id:
                type: integer
                description: if you are searching for changes in answers to concrete question, pass here the id of the question
              max_length:
                type: integer
                description: maximum size of the result array
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#components/schemas/Action'
  /login:
    post:
      tags:
        - users
      description:
        Tries to log in a use
      parameters:
        - in: body
          name: data
          schema:
            type: object
            properties:
              login:
                type: string
              password:
                type: string
              language:
                type: string
                description: Sets the selected language for the user
            required:
              - login
              - password
      responses:
        200:
          description: Successfully logged in (JWT saved in cookies)
        400:
          description: Not all arguments provided
        401:
          description: Invalid password
        404:
          description: No such user

  /users:
    get:
      tags:
        - users
      description:
        Returns a list of users
      responses:
        200:
          description:
            Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#components/schemas/User'
        403:
          description:
            Not enough rights
    post:
      tags:
        - users
      description:
        Creates or updates a new user
      parameters:
        - in: body
          name: data
          schema:
            type: object
            properties:
              login:
                type: string
              name:
                type: string
              comment:
                type: string
              role:
                type: string
                enum:
                  - GUEST
                  - INTERN
                  - EDITOR
                  - ADMIN
              password:
                type: string
            required:
              - login
              - name
              - comment
              - role
              - password
      responses:
        201:
          description: Successfully created or updated
          content:
            application/json:
              schema:
                type: integer
                description: ID of created or updated item
  /logout:
    post:
      tags:
        - users
      description:
        Clears user's login cookies
      responses:
        200:
          description: Successfull log out
  /language:
    post:
      tags:
        - users
      description:
        Changes selected language
      parameters:
        - in: body
          name: language
          schema:
            type: object
            properties:
              language:
                type: string
                enum:
                  - ru
                  - en
                  - ba
      resonses:
        200:
          description: Success

  /forms:
    get:
      tags:
        - main
      description:
        Returns a table to display on the main page
      parameters:
        - in: body
          name: data
          schema:
            $ref: '#components/schemas/FormFilter'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    column_name:
                      type: string
                    values:
                      type: array
                      items:
                        type: object
                        properties:
                          answers:
                            type: array
                            items:
                              $ref: '#/components/schemas/Answer'

        400:
          description: Invalid argument
    post:
      tags:
        - main
      description:
        Update form info or create a new form
      parameters:
        - in: body
          name: form
          schema:
            $ref: '#components/schemas/AnsweredForm'
      responses:
        200:
          description:
            Successful update
          content:
            application/json:
              schema:
                type: integer
                description: ID of created or updated item
        403:
          description:
            Not enough rights to perform some of the changes
        500:
          description:
            Unexpected server problem

  /form_page:
    get:
      tags:
        - main
      description:
        Returns a full info about a given form by it's ID
      parameters:
        - in: body
          name: id
          schema:
            type: object
            properties:
              id:
                type: integer
            required:
              - id
      responses:
        200:
          description: Successful return
          content:
            application/json:
              schema:
                $ref: '#components/schemas/AnsweredForm'
        404:
          description: No form with this ID
        400:
          description: Invalid argument as ID
  /statistics:
    get:
      tags:
        - statistics
      description:
        Prepares information about answers for a given question
      parameters:
        - in: body
          name: info
          schema:
            type: object
            properties:
              question_id:
                type: integer
              min_value:
                oneOf:
                  - type: integer
                  - schema:
                    type: string
                    format: date-time
              max_value:
                oneOf:
                  - type: integer
                  - schema:
                    type: string
                    format: date-time
              step:
                type: integer
                description:
                  If the answer type is datetime, step in days should be passed
            required:
              - question_id

      responses:
        200:
          description:
            Success
          content:
            application/json:
              schema:
                type: object
                description:
                  It's a table with keys=columns and then subkeys=rows
                properties:
                  PLANNED:
                    type: object
                    properties:
                      row_1:
                        type: integer
                      row_2:
                        type: integer
                      etc...:
                        type: integer
                  STARTED:
                    type: object
                    properties:
                      row_1:
                        type: integer
                      row_2:
                        type: integer
                      etc...:
                        type: integer
                  FINISHED:
                    type: object
                    properties:
                      row_1:
                        type: integer
                      row_2:
                        type: integer
                      etc...:
                        type: integer

  /answer_options:
    get:
      tags:
        - form
      parameters:
        - in: body
          name: id
          schema:
            type: object
            properties:
              id:
                type: integer
            required:
              - id
      description:
        Returns an answer option
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#components/schemas/AnswerOption'
        404:
          description: Not found
    post:
      tags:
        - form
      description:
        Updates or creates a new answer option block
      parameters:
        - in: body
          name: answer_block
          schema:
            $ref: '#components/schemas/AnswerOption'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: integer
                description: Id of createdo or updated item
        400:
          description: Some arguments are invalid
  /all_answer_blocks:
    get:
      tags:
        - form
      description:
        Returns a list of all answer blocks
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#components/schemas/AnswerBlock'
  /answer_block:
    get:
      tags:
        - form
      parameters:
        - in: body
          name: id
          schema:
            type: object
            properties:
              id:
                type: integer
            required:
              - id
      description:
        Returns the answer block
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#components/schemas/AnswerBlock'
        404:
          description: Not found
    post:
      tags:
        - form
      description:
        Updates or creates a new answer block
      parameters:
        - in: body
          name: block
          schema:
            type: object
            properties:
              name:
                $ref: '#components/schemas/TranslatedText'
              id:
                type: integer
                description: If you want to create an item do not provide this field
              deleted:
                type: boolean
            required:
              - name
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: integer
                description: Id of created or updated item
        404:
          description: No block with such id
        403:
          description: Permission denied
        400:
          description: Incorrect input format
  /question_block:
    post:
      tags:
        - form
      description:
        Creates or updates a question block data
      parameters:
        - in: body
          name: info
          schema:
            type: object
            properties:
              id:
                type: integer
              form_type:
                type: string
                enum:
                  - LEADER
                  - PROJECT
              name:
                $ref: '#components/schemas/TranslatedText'
              sorting:
                type: integer
                description: The key by which the blocks are sorted on the page
              deleted:
                type: boolean
            required:
              - form_type
              - name
              - sorting
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: integer
                description: Id of created or updated item
        400:
          description: Incorrect request arguments
  /table:
    post:
      tags:
        - form
      description:
        Creates a Fixed Table or a Question Table
      parameters:
        - in: body
          name: info
          schema:
            type: object
            properties:
              id:
                type: integer
              block_sorting:
                type: integer
                description: A key by which questions are sorted inside the question block
              type:
                type: string
                enum:
                  - FIXED_TABLE
                  - QUESTION_TABLE
            required:
              - block_sorting
              - type
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: integer
                description: Id of created or updated item

  /question:
    get:
      tags:
        - form
      description:
        Returns a Question object by ID
      parameters:
        - in: body
          name: id
          schema:
            type: object
            properties:
              id:
                type: integer
            required:
              - id
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#components/schemas/Question'
        404:
          description: No Question with such ID
        400:
          description: Incorrect request arguments
    post:
      tags:
        - form
      description: Creates or updates a question object
      parameters:
        - in: body
          name: question
          schema:
            $ref: '#components/schemas/Question'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: integer
                description: Id of created or updated item
        400:
          description: Incorrect arguments
        403:
          description: Not enough rights to perform the update or create
  /tags:
    get:
      tags:
        - form
      description: Returns a tag by it's ID
      parameters:
        - in: body
          name: id
          schema:
            type: object
            properties:
              id:
                type: integer
            required:
              - id
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#components/schemas/Tag'
    post:
      tags:
        - form
      description: Creates or updates a tag object
      parameters:
        - in: body
          name: tag
          schema:
            $ref: '#components/schemas/Tag'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: integer
                description: Id of the created or updated item
        400:
          description: Some of arguments are invalid
  /tag_type:
    get:
      tags:
        - form
      description:
        Returns a tree of Tags
      parameters:
        - in: body
          name: filter
          schema:
            type: object
            properties:
              id:
                type: integer
                description: ID of the block tags tree should belong to. If none is passed, all tags will be returned
            required:
              - id
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    tag_type:
                      $ref: '#components/schemas/TranslatedText'
                    tags:
                      type: array
                      items:
                        $ref: '#components/schemas/Tag'
    post:
      tags:
        - form
      description: Update or create a new Tag Type
      parameters:
        - in: body
          name: tag_type
          schema:
            type: object
            properties:
              name:
                $ref: '#components/schemas/TranslatedText'
              id:
                type: integer
                description:
                  If you want to create a new item do not provide this argument
              deleted:
                type: boolean
            required:
              - name
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: integer
                description: Id of the created or updated item
        404:
          description: No tag type with such id
        403:
          description: Permission denied
        400:
          description: Incorrect input format
  /form:
    get:
      tags:
        - form
      description:
        Returns a blanc form
      parameters:
        - in: body
          name: FormType
          schema:
            type: object
            properties:
              form_type:
                type: string
                enum:
                  - LEADER
                  - PROJECT
            required:
              - form_type
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#components/schemas/Form'
        400:
          description: Incorrect format
        403:
          description: Permission denied
  /toponyms_tree:
    get:
      tags:
        - main
      description: Returns a tree of toponyms
      responses:
        200:
          description: A tree structured toponyms
          content:
            application/json:
              schema:
                type: object
                properties:
                  roots:
                    type: array
                    items:
                      $ref: '#components/schemas/Toponym'
  /toponym:
    get:
      tags:
        - main
      description: Returns a single toponym info. You can provide either name or ID of the toponym
      parameters:
        - in: body
          name: data
          schema:
            type: object
            properties:
              id:
                type: integer
              name:
                type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  parent_id:
                    type: integer
                  ancestors:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        name:
                          type: string
                        parent_id:
                          type: integer
        400:
          description: Invalid arguments
        404:
          description: No such toponym
    put:
      tags:
        - main
      description: Update a Toponym (set a new name)
      parameters:
        - in: body
          name: data
          schema:
            type: object
            properties:
              id:
                type: integer
              name:
                type: string
            required:
              - id
              - name
      responses:
        200:
          description: Success
        400:
          description: Invalid arguments
        403:
          description: Not enough rights
        404:
          description: No such toponym
    post:
      tags:
        - main
      description: Create a new Toponym
      parameters:
        - in: body
          name: data
          schema:
            type: object
            properties:
              name:
                type: string
              parent_id:
                type: integer
            required:
              - name
              - parent_id
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                type: integer
                description: ID of the created item
        400:
          description: Invalid arguments (for example, toponym with such name already exists)
        403:
          description: Not enough rights

  /export/forms:
    get:
      tags:
        - export
      description:
        All the export works as follows':' It generates a file and returns a temporary link to download the file. The client should redirect by this link and download it
      responses:
        200:
          description:
            Success. Returns the link
          content:
            application/json:
              schema:
                type: string
                format: url
                description: The URL to download the exported file
        403:
          description: Access denied
  /export/form_schema:
    get:
      tags:
        - export
      description:
        The same as for forms export. Returns a link to download word file with form template
      responses:
        200:
          description:
            Success. Returns the link
          content:
            application/json:
              schema:
                type: string
                format: url
                description: The URL to download the exported file
        403:
          description: Access denied
  /export/changes:
    get:
      tags:
        - export
      description:
        The same as for forms export. Returns a link do download an excel file with changes history
      parameters:
        - in: body
          name: filter
          schema:
            type: object
            properties:
              table:
                type: string
                enum:
                  - USERS
                  - LEADERS
                  - PROJECTS
                  - FORM
                  - ALL
      responses:
        200:
          description:
            Success. Returns the link
          content:
            application/json:
              schema:
                type: string
                format: url
                description: The URL to download the exported file
        403:
          description: Access denied

  /export/tags:
    get:
      tags:
        - export
      description:
        The same as for forms export. Returns a link to download an excel file with tags
      responses:
        200:
          description:
            Success. Returns the link
          content:
            application/json:
              schema:
                type: string
                format: url
                description: The URL to download the exported file
        403:
          description: Access denied

  /export/answer_blocks:
    get:
      tags:
        - export
      description:
        The same as for forms export. Returns a link to download an excel file with answer blocks and answer options
      responses:
        200:
          description:
            Success. Returns the link
          content:
            application/json:
              schema:
                type: string
                format: url
                description: The URL to download the exported file
        403:
          description: Access denied
  /settings/max_size/{field_name}:
    get:
      tags:
        - settings
      description:
        Returns a maximum possible size of a given field
      parameters:
        - in: path
          required: true
          name: field_name
          schema:
            type: string
            enum:
              - LOGIN
              - NAME
              - TAG
              - COMMENT
              - QUESTION_BLOCK_NAME
              - QUESTION_TEXT
              - ANSWER_BLOCK_NAME
              - ANSWER_OPTION_NAME
              - SHORT_ANSWER_OPTION_NAME
              - SHEET_TITLE
              - ANSWER
              - LEADERS_PAGE
              - PROJECTS_PAGE
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: integer
                description: the size is letters (characters)
    post:
      tags:
        - settings
      description:
        Sets a maximum possible size of a given field
      parameters:
        - in: path
          required: true
          name: field_name
          schema:
            type: string
            enum:
              - COMMENT
              - SHORT_ANSWER_OPTION_NAME
              - ANSWER
              - LEADERS_PAGE
              - PROJECTS_PAGE
        - in: body
          name: value
          schema:
            type: integer
      responses:
        200:
          description: Successfully updated the value

components:
  schemas:
    Action:
      title: Action
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        table_id:
          type: integer
        column_id:
          type: string
        row_id:
          type: integer
        ip:
          type: string
        timestamp:
          type: string
          format: date-time
        value:
          oneOf:
            - type: integer
            - type: string
            - type: boolean

    User:
      title: User
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the given user.
          minimum: 0
        name:
          type: string
        login:
          type: string
        comment:
          type: string
          example: This is a test user
        role:
          type: string
          enum:
            - GUEST
            - INTERN
            - EDITOR
            - ADMIN
          example: EDITOR
        create_timestamp:
          type: string
          description: Set to true if the user's email has been verified.
          format: date-time
        deleted:
          type: boolean
          format: date
          description: The date that the user was created.
    Answer:
      title: Answer
      type: object
      properties:
        id:
          type: integer
        form_id:
          type: integer
        question_id:
          type: integer
        table_row:
          type: integer
        row_question_id:
          type: integer
        value:
          oneOf:
            - type: string
            - type: integer
            - type: boolean
        type:
          type: string
          enum:
            - DATE
            - USER
            - LONG_TEXT
            - SHORT_TEXT
            - MULTIPLE_CHOICE
            - CHECKBOX
            - LOCATION
            - NUMBER
            - BOOLEAN
            - RELATION
        ref_id:
          type: integer
          description: If the answer is stored as a ref, this contains the ref and value field contains the content to show. Otherwise this is an empty field
        tags:
          type: array
          items:
            $ref: '#components/schemas/Tag'
        create_timestamp:
          type: string
          format: date-time
        deleted:
          type: boolean
    AnswerBlock:
      title: AnswerBlock
      type: object
      properties:
        id:
          type: integer
        name:
          $ref: '#/components/schemas/TranslatedText'
        options:
          type: array
          items:
            $ref: '#/components/schemas/AnswerOption'
        create_timestamp:
          type: string
          format: date-time
        deleted:
          type: boolean
      description: A block of AnswerOptions
    AnswerOption:
      title: AnswerOption
      type: object
      properties:
        id:
          type: integer
        name:
          $ref: '#/components/schemas/TranslatedText'
        short_name:
          $ref: '#/components/schemas/TranslatedText'
        answer_block_id:
          type: integer
        creation_timestamp:
          type: string
          format: date-time
        deleted:
          type: boolean
      required:
        - name
        - short_name
        - answer_block_id
      description: An option object in multiple-choice or checkbox questions
    TranslatedText:
      title: TranslatedText
      type: object
      description: >-
        Contains different translations of one text (there might be any set of
        languages)
      properties:
        ru:
          type: string
          description: Russian translation of the text
        en:
          type: string
          description: English translation of the text
        ba:
          type: string
          description: Bahasa translation of the text
        etc...:
          type: string
    FormattingSettings:
      title: FormattingSettings
      type: object
      properties:
        id:
          type: integer
        block_sorting:
          type: integer
          description: If it's a free question. The key to sort it inside a block
        table_row:
          type: integer
          description: If it's a fixed table question. Row index in a table
        table_column:
          type: integer
          description: >-
            If it's a question table or fixed table question. Column index in
            the table
        show_on_main_page:
          type: boolean
          description: >-
            Should this question with it's answers be added to the table on the
            main page or not?
        block_id:
          type: integer
          description: Id of the question block this question is contained in
        table_id:
          type: integer
          description: >-
            If it's a question table question. Id of the table containing the
            question
        fixed_table_id:
          type: integer
          description: If it's a fixed table question. Id of the containing fixed table
        creation_timestamp:
          type: string
          format: date-time
        deleted:
          type: boolean
      required:
        - block_sorting
        - show_on_main_page
        - block_id
      description: >-
        Contains information for some question about how to format it and it's
        answers on the website
    PrivacySettings:
      title: PrivacySettings
      type: object
      description: An object with setting of privacy for some question
      properties:
        id:
          type: integer
        editor_access:
          type: string
          enum:
            - CAN_NOTHING
            - CAN_SEE
            - CAN_EDIT
        guest_access:
          type: string
          enum:
            - CAN_NOTHING
            - CAN_SEE
            - CAN_EDIT
        intern_access:
          type: string
          enum:
            - CAN_NOTHING
            - CAN_SEE
            - CAN_EDIT
        creation_timestamp:
          type: string
          format: date-time
        deleted:
          type: boolean
      required:
        - editor_access
        - intern_access
        - guest_access
    RelationSettings:
      title: RelationSettings
      type: object
      properties:
        id:
          type: integer
        relation_type:
          type: string
          enum:
            - LEADER_TO_LEADER
            - LEADER_TO_PROJECT
            - PROJECT_TO_LEADER
            - PROJECT_TO_PROJECT
        related_visualization_type:
          type: string
          enum:
            - FULL
            - NAMES_ONLY
            - NOTHING
          description: A visualization type (how to show this table on the related object page)
        related_visualization_sorting:
          type: integer
          description: Where to place the table on the page of related object (key for sorting with other question blocks)
        forward_relation_sheet_name:
          type: string
          description: If it should be exported in such way, how to call the sheet (else None is stored)
        inverse_relation_sheet_name:
          type: string
          description: If it should be exported in such way, how to call the sheet (else None is stored)
        main_page_count_title:
          type: '#/components/schemas/TranslatedText'
          description: If count of relations should be shown on the main page, how to call the column
        inverse_main_page_count_title:
          type: '#/components/schemas/TranslatedText'
          description: The same as main_page_count_title, but for inverse relation
        creation_timestamp:
          type: string
          format: date-time
        deleted:
          type: boolean
      required:
        - related_visualization_type
        - related_visualization_sorting
        - relation_type
      description: If the question is a relation, it should have additional relation
        settings
    Question:
      title: Question
      type: object
      properties:
        id:
          type: integer
        question_type:
          type: string
          enum:
            - DATE
            - USER
            - LONG_TEXT
            - SHORT_TEXT
            - MULTIPLE_CHOICE
            - CHECKBOX
            - LOCATION
            - NUMBER
            - BOOLEAN
            - RELATION
        comment:
          $ref: '#/components/schemas/TranslatedText'
        answer_block_id:
          type: integer
          description: If it is multiple-choice or checkbox, where to get the options?
        text:
          $ref: '#/components/schemas/TranslatedText'
        short_text:
          $ref: '#/components/schemas/TranslatedText'
        related_question_id:
          type: integer
        formatting_settings:
          $ref: '#/components/schemas/FormattingSettings'
        privacy_settings:
          $ref: '#/components/schemas/PrivacySettings'
        relation_settings:
          $ref: '#/components/schemas/RelationSettings'
        tag_type_id:
          type: integer
      required:
        - question_type
        - comment
        - answer_block_id
        - text
        - short_text
        - formatting_settings
        - privacy_settings
    FixedTable:
      title: FixedTable
      type: object
      description: Describes a fixed table object
      properties:
        columns:
          type: array
          items:
            $ref: '#/components/schemas/Question'
        rows:
          type: array
          items:
            $ref: '#/components/schemas/Question'
        answers:
          type: array
          description: >-
            This is optional. If you request only a form, the result will not
            contain this field. Otherwise it returns a 2D array with the table
            of answers indexed by ansers[row][column]
          items:
            type: array
            items:
              $ref: '#/components/schemas/Answer'
    QuestionTable:
      title: QuestionTable
      type: object
      properties:
        questions:
          type: array
          description: >-
            If you request it with answers, each question will contain an array
            of answers (array = column of answers)
          items:
            $ref: '#/components/schemas/Question'
    QuestionBlock:
      title: QuestionBlock
      type: object
      properties:
        elements:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                example: question
              value:
                anyOf:
                  - $ref: '#/components/schemas/Question'
                  - $ref: '#/components/schemas/FixedTable'
                  - $ref: '#/components/schemas/QuestionTable'
                description: >-
                  If type is 'question' it will contain a Question object. If
                  type is 'table_question' it will contain a QuestionTable
                  object. If type is 'fixed_table_question', it will contain a
                  FixedTable object
      description: Fully describes question block elements in a proper order

    AnsweredForm:
      title: AnsweredForm
      type: object
      properties:
        id:
          type: integer
        state:
          type: string
          enum:
            - PLANNED
            - STARTED
            - FINISHED
        name:
          type: string
        form_type:
          type: string
          enum:
            - LEADER
            - PROJECT
        answers:
          type: array
          items:
            type: object
            properties:
              question_id:
                type: integer
              answers:
                type: array
                items:
                  $ref: '#components/schemas/Answer'
            required:
              - question_id
              - answers
        deleted:
          type: boolean
      required:
        - state
        - name
        - form_type
        - answers
    Form:
      title: Form
      type: object
      properties:
        form_type:
          type: string
          enum:
            - LEADER
            - PROJECT
        question_blocks:
          type: array
          items:
            $ref: '#components/schemas/QuestionBlock'
    Tag:
      title: Tag
      type: object
      properties:
        id:
          type: integer
        name:
          $ref: '#components/schemas/TranslatedText'
        type_id:
          type: integer
          description: ID of tag type (tag group)
        parent_id:
          type: integer
          description: ID of a parent tag. If the tag is root, it's None
        deleted:
          type: boolean
      required:
        - name
        - type_id
        - parent_id
    Toponym:
      title: Toponym
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        parent_id:
          type: integer
        children:
          type: array
          items:
            $ref: '#components/schemas/Toponym'
    TimestampRange:
      title: TimestampRange
      type: object
      properties:
        from:
          type: string
          format: date-time
        to:
          type: string
          format: date-time
    AnswerFilter:
      type: object
      properties:
        question_id:
          type: integer
        row_question_id:
          type: integer
          description:
            If it is supposed to be an answer to a fixed table question
        exact_value:
          oneOf:
            - type: integer
            - type: string
            - type: boolean
        min_value:
          oneOf:
            - type: integer
            - schema:
              type: string
              format: date-time
        max_value:
          oneOf:
            - type: integer
            - schema:
              type: string
              format: date-time
        substring:
          type: string

    FormFilter:
      type: object
      properties:
        form_type:
          type: string
          enum:
            - LEADER
            - PROJECT
        name_substr:
          type: string
        answer_filters:
          type: array
          items:
            $ref: '#components/schemas/AnswerFilter'
      required:
        - form_type
        - question_id
        - answer_filters
  securitySchemes: {}
